{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.versionCompare = function (v1, v2, operator) {\n  //      discuss at: http://locutus.io/php/version_compare/\n  //      original by: Philippe Jausions (http://pear.php.net/user/jausions)\n  //      original by: Aidan Lister (http://aidanlister.com/)\n  //      reimplemented by: Kankrelune (http://www.webfaktory.info/)\n  //      improved by: Brett Zamir (http://brett-zamir.me)\n  //      improved by: Scott Baker\n  //      improved by: Theriault (https://github.com/Theriault)\n  //      example 1: version_compare('8.2.5rc', '8.2.5a')\n  //      returns 1: 1\n  //      example 2: version_compare('8.2.50', '8.2.52', '<')\n  //      returns 2: true\n  //      example 3: version_compare('5.3.0-dev', '5.3.0')\n  //      returns 3: -1\n  //      example 4: version_compare('4.1.0.52','4.01.0.51')\n  //      returns 4: 1\n  // Important: compare must be initialized at 0.\n  var i;\n  var x;\n  var compare = 0;\n  // vm maps textual PHP versions to negatives so they're less than 0.\n  // PHP currently defines these as CASE-SENSITIVE. It is important to\n  // leave these as negatives so that they can come before numerical versions\n  // and as if no letters were there to begin with.\n  // (1alpha is < 1 and < 1.1 but > 1dev1)\n  // If a non-numerical value can't be mapped to this table, it receives\n  // -7 as its value.\n  var vm = {\n    \"dev\": -6,\n    \"alpha\": -5,\n    \"a\": -5,\n    \"beta\": -4,\n    \"b\": -4,\n    \"RC\": -3,\n    \"rc\": -3,\n    \"#\": -2,\n    \"p\": 1,\n    \"pl\": 1\n  };\n  // This function will be called to prepare each version argument.\n  // It replaces every _, -, and + with a dot.\n  // It surrounds any nonsequence of numbers/dots with dots.\n  // It replaces sequences of dots with a single dot.\n  //    version_compare('4..0', '4.0') === 0\n  // Important: A string of 0 length needs to be converted into a value\n  // even less than an unexisting value in vm (-7), hence [-8].\n  // It's also important to not strip spaces because of this.\n  //   version_compare('', ' ') === 1\n  var prepVersion = function prepVersion(v) {\n    v = (\"\" + v).replace(/[_\\-+]/g, \".\");\n    v = v.replace(/([^.\\d]+)/g, \".$1.\").replace(/\\.{2,}/g, \".\");\n    return !v.length ? [-8] : v.split(\".\");\n  };\n  // This converts a version component to a number.\n  // Empty component becomes 0.\n  // Non-numerical component becomes a negative number.\n  // Numerical component becomes itself as an integer.\n  var numVersion = function numVersion(v) {\n    return !v ? 0 : isNaN(v) ? vm[v] || -7 : parseInt(v, 10);\n  };\n  v1 = prepVersion(v1);\n  v2 = prepVersion(v2);\n  x = Math.max(v1.length, v2.length);\n  for (i = 0; i < x; i++) {\n    if (v1[i] === v2[i]) {\n      continue;\n    }\n    v1[i] = numVersion(v1[i]);\n    v2[i] = numVersion(v2[i]);\n    if (v1[i] < v2[i]) {\n      compare = -1;\n      break;\n    } else if (v1[i] > v2[i]) {\n      compare = 1;\n      break;\n    }\n  }\n  if (!operator) {\n    return compare;\n  }\n  // Important: operator is CASE-SENSITIVE.\n  // \"No operator\" seems to be treated as \"<.\"\n  // Any other values seem to make the function return null.\n  switch (operator) {\n    case \">\":\n    case \"gt\":\n      return compare > 0;\n    case \">=\":\n    case \"ge\":\n      return compare >= 0;\n    case \"<=\":\n    case \"le\":\n      return compare <= 0;\n    case \"===\":\n    case \"=\":\n    case \"eq\":\n      return compare === 0;\n    case \"<>\":\n    case \"!==\":\n    case \"ne\":\n      return compare !== 0;\n    case \"\":\n    case \"<\":\n    case \"lt\":\n      return compare < 0;\n    default:\n      return null;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","versionCompare","v1","v2","operator","i","x","compare","vm","prepVersion","v","replace","length","split","numVersion","isNaN","parseInt","Math","max"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/utils/version-compare.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.versionCompare = (v1, v2, operator) => {\n    //      discuss at: http://locutus.io/php/version_compare/\n    //      original by: Philippe Jausions (http://pear.php.net/user/jausions)\n    //      original by: Aidan Lister (http://aidanlister.com/)\n    //      reimplemented by: Kankrelune (http://www.webfaktory.info/)\n    //      improved by: Brett Zamir (http://brett-zamir.me)\n    //      improved by: Scott Baker\n    //      improved by: Theriault (https://github.com/Theriault)\n    //      example 1: version_compare('8.2.5rc', '8.2.5a')\n    //      returns 1: 1\n    //      example 2: version_compare('8.2.50', '8.2.52', '<')\n    //      returns 2: true\n    //      example 3: version_compare('5.3.0-dev', '5.3.0')\n    //      returns 3: -1\n    //      example 4: version_compare('4.1.0.52','4.01.0.51')\n    //      returns 4: 1\n    // Important: compare must be initialized at 0.\n    let i;\n    let x;\n    let compare = 0;\n    // vm maps textual PHP versions to negatives so they're less than 0.\n    // PHP currently defines these as CASE-SENSITIVE. It is important to\n    // leave these as negatives so that they can come before numerical versions\n    // and as if no letters were there to begin with.\n    // (1alpha is < 1 and < 1.1 but > 1dev1)\n    // If a non-numerical value can't be mapped to this table, it receives\n    // -7 as its value.\n    const vm = {\n        \"dev\": -6,\n        \"alpha\": -5,\n        \"a\": -5,\n        \"beta\": -4,\n        \"b\": -4,\n        \"RC\": -3,\n        \"rc\": -3,\n        \"#\": -2,\n        \"p\": 1,\n        \"pl\": 1\n    };\n    // This function will be called to prepare each version argument.\n    // It replaces every _, -, and + with a dot.\n    // It surrounds any nonsequence of numbers/dots with dots.\n    // It replaces sequences of dots with a single dot.\n    //    version_compare('4..0', '4.0') === 0\n    // Important: A string of 0 length needs to be converted into a value\n    // even less than an unexisting value in vm (-7), hence [-8].\n    // It's also important to not strip spaces because of this.\n    //   version_compare('', ' ') === 1\n    const prepVersion = (v) => {\n        v = (\"\" + v).replace(/[_\\-+]/g, \".\");\n        v = v.replace(/([^.\\d]+)/g, \".$1.\").replace(/\\.{2,}/g, \".\");\n        return (!v.length ? [-8] : v.split(\".\"));\n    };\n    // This converts a version component to a number.\n    // Empty component becomes 0.\n    // Non-numerical component becomes a negative number.\n    // Numerical component becomes itself as an integer.\n    const numVersion = (v) => {\n        return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10));\n    };\n    v1 = prepVersion(v1);\n    v2 = prepVersion(v2);\n    x = Math.max(v1.length, v2.length);\n    for (i = 0; i < x; i++) {\n        if (v1[i] === v2[i]) {\n            continue;\n        }\n        v1[i] = numVersion(v1[i]);\n        v2[i] = numVersion(v2[i]);\n        if (v1[i] < v2[i]) {\n            compare = -1;\n            break;\n        }\n        else if (v1[i] > v2[i]) {\n            compare = 1;\n            break;\n        }\n    }\n    if (!operator) {\n        return compare;\n    }\n    // Important: operator is CASE-SENSITIVE.\n    // \"No operator\" seems to be treated as \"<.\"\n    // Any other values seem to make the function return null.\n    switch (operator) {\n        case \">\":\n        case \"gt\":\n            return (compare > 0);\n        case \">=\":\n        case \"ge\":\n            return (compare >= 0);\n        case \"<=\":\n        case \"le\":\n            return (compare <= 0);\n        case \"===\":\n        case \"=\":\n        case \"eq\":\n            return (compare === 0);\n        case \"<>\":\n        case \"!==\":\n        case \"ne\":\n            return (compare !== 0);\n        case \"\":\n        case \"<\":\n        case \"lt\":\n            return (compare < 0);\n        default:\n            return null;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,UAACC,EAAE,EAAEC,EAAE,EAAEC,QAAQ,EAAK;EAC3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,OAAO,GAAG,CAAC;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMC,EAAE,GAAG;IACP,KAAK,EAAE,CAAC,CAAC;IACT,OAAO,EAAE,CAAC,CAAC;IACX,GAAG,EAAE,CAAC,CAAC;IACP,MAAM,EAAE,CAAC,CAAC;IACV,GAAG,EAAE,CAAC,CAAC;IACP,IAAI,EAAE,CAAC,CAAC;IACR,IAAI,EAAE,CAAC,CAAC;IACR,GAAG,EAAE,CAAC,CAAC;IACP,GAAG,EAAE,CAAC;IACN,IAAI,EAAE;EACV,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,CAAC,EAAK;IACvBA,CAAC,GAAG,CAAC,EAAE,GAAGA,CAAC,EAAEC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;IACpCD,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;IAC3D,OAAQ,CAACD,CAAC,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGF,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC;EAC3C,CAAC;EACD;EACA;EACA;EACA;EACA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIJ,CAAC,EAAK;IACtB,OAAO,CAACA,CAAC,GAAG,CAAC,GAAIK,KAAK,CAACL,CAAC,CAAC,GAAGF,EAAE,CAACE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGM,QAAQ,CAACN,CAAC,EAAE,EAAE,CAAE;EAC9D,CAAC;EACDR,EAAE,GAAGO,WAAW,CAACP,EAAE,CAAC;EACpBC,EAAE,GAAGM,WAAW,CAACN,EAAE,CAAC;EACpBG,CAAC,GAAGW,IAAI,CAACC,GAAG,CAAChB,EAAE,CAACU,MAAM,EAAET,EAAE,CAACS,MAAM,CAAC;EAClC,KAAKP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACpB,IAAIH,EAAE,CAACG,CAAC,CAAC,KAAKF,EAAE,CAACE,CAAC,CAAC,EAAE;MACjB;IACJ;IACAH,EAAE,CAACG,CAAC,CAAC,GAAGS,UAAU,CAACZ,EAAE,CAACG,CAAC,CAAC,CAAC;IACzBF,EAAE,CAACE,CAAC,CAAC,GAAGS,UAAU,CAACX,EAAE,CAACE,CAAC,CAAC,CAAC;IACzB,IAAIH,EAAE,CAACG,CAAC,CAAC,GAAGF,EAAE,CAACE,CAAC,CAAC,EAAE;MACfE,OAAO,GAAG,CAAC,CAAC;MACZ;IACJ,CAAC,MACI,IAAIL,EAAE,CAACG,CAAC,CAAC,GAAGF,EAAE,CAACE,CAAC,CAAC,EAAE;MACpBE,OAAO,GAAG,CAAC;MACX;IACJ;EACJ;EACA,IAAI,CAACH,QAAQ,EAAE;IACX,OAAOG,OAAO;EAClB;EACA;EACA;EACA;EACA,QAAQH,QAAQ;IACZ,KAAK,GAAG;IACR,KAAK,IAAI;MACL,OAAQG,OAAO,GAAG,CAAC;IACvB,KAAK,IAAI;IACT,KAAK,IAAI;MACL,OAAQA,OAAO,IAAI,CAAC;IACxB,KAAK,IAAI;IACT,KAAK,IAAI;MACL,OAAQA,OAAO,IAAI,CAAC;IACxB,KAAK,KAAK;IACV,KAAK,GAAG;IACR,KAAK,IAAI;MACL,OAAQA,OAAO,KAAK,CAAC;IACzB,KAAK,IAAI;IACT,KAAK,KAAK;IACV,KAAK,IAAI;MACL,OAAQA,OAAO,KAAK,CAAC;IACzB,KAAK,EAAE;IACP,KAAK,GAAG;IACR,KAAK,IAAI;MACL,OAAQA,OAAO,GAAG,CAAC;IACvB;MACI,OAAO,IAAI;EAAC;AAExB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}