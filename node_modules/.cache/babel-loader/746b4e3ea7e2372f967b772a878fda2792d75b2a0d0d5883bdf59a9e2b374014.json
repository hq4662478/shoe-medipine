{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass TelevisionParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n      if (!this.isHbbTv(userAgent)) return result;\n      result.type = \"television\";\n      for (const [brand, television] of Object.entries(televisions_json_1.default)) {\n        const match = user_agent_1.userAgentParser(television.regex, userAgent);\n        if (!match) continue;\n        result.brand = brand;\n        if (\"model\" in television && television.model) {\n          result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n        } else if (\"models\" in television && television.models) {\n          for (const model of television.models) {\n            const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!modelMatch) continue;\n            result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n            break;\n          }\n        }\n        break;\n      }\n      return result;\n    };\n    this.isHbbTv = userAgent => {\n      return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n    };\n  }\n}\nexports.default = TelevisionParser;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","televisions_json_1","require","variable_replacement_1","user_agent_1","model_1","TelevisionParser","constructor","parse","userAgent","result","type","brand","model","isHbbTv","television","entries","default","match","userAgentParser","regex","buildModel","variableReplacement","trim","models","modelMatch"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/device/televisions.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass TelevisionParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            if (!this.isHbbTv(userAgent))\n                return result;\n            result.type = \"television\";\n            for (const [brand, television] of Object.entries(televisions_json_1.default)) {\n                const match = user_agent_1.userAgentParser(television.regex, userAgent);\n                if (!match)\n                    continue;\n                result.brand = brand;\n                if (\"model\" in television && television.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n                }\n                else if (\"models\" in television && television.models) {\n                    for (const model of television.models) {\n                        const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!modelMatch)\n                            continue;\n                        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n                        break;\n                    }\n                }\n                break;\n            }\n            return result;\n        };\n        this.isHbbTv = (userAgent) => {\n            return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n        };\n    }\n}\nexports.default = TelevisionParser;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGP,eAAe,CAACQ,OAAO,CAAC,gDAAgD,CAAC,CAAC;AACrG,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMI,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,KAAK,GAAIC,SAAS,IAAK;MACxB,MAAMC,MAAM,GAAG;QACXC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE;MACX,CAAC;MACD,IAAI,CAAC,IAAI,CAACC,OAAO,CAACL,SAAS,CAAC,EACxB,OAAOC,MAAM;MACjBA,MAAM,CAACC,IAAI,GAAG,YAAY;MAC1B,KAAK,MAAM,CAACC,KAAK,EAAEG,UAAU,CAAC,IAAIlB,MAAM,CAACmB,OAAO,CAACf,kBAAkB,CAACgB,OAAO,CAAC,EAAE;QAC1E,MAAMC,KAAK,GAAGd,YAAY,CAACe,eAAe,CAACJ,UAAU,CAACK,KAAK,EAAEX,SAAS,CAAC;QACvE,IAAI,CAACS,KAAK,EACN;QACJR,MAAM,CAACE,KAAK,GAAGA,KAAK;QACpB,IAAI,OAAO,IAAIG,UAAU,IAAIA,UAAU,CAACF,KAAK,EAAE;UAC3CH,MAAM,CAACG,KAAK,GAAGR,OAAO,CAACgB,UAAU,CAAClB,sBAAsB,CAACmB,mBAAmB,CAACP,UAAU,CAACF,KAAK,EAAEK,KAAK,CAAC,CAAC,CAACK,IAAI,EAAE;QACjH,CAAC,MACI,IAAI,QAAQ,IAAIR,UAAU,IAAIA,UAAU,CAACS,MAAM,EAAE;UAClD,KAAK,MAAMX,KAAK,IAAIE,UAAU,CAACS,MAAM,EAAE;YACnC,MAAMC,UAAU,GAAGrB,YAAY,CAACe,eAAe,CAACN,KAAK,CAACO,KAAK,EAAEX,SAAS,CAAC;YACvE,IAAI,CAACgB,UAAU,EACX;YACJf,MAAM,CAACG,KAAK,GAAGR,OAAO,CAACgB,UAAU,CAAClB,sBAAsB,CAACmB,mBAAmB,CAACT,KAAK,CAACA,KAAK,EAAEY,UAAU,CAAC,CAAC,CAACF,IAAI,EAAE;YAC7G;UACJ;QACJ;QACA;MACJ;MACA,OAAOb,MAAM;IACjB,CAAC;IACD,IAAI,CAACI,OAAO,GAAIL,SAAS,IAAK;MAC1B,OAAOL,YAAY,CAACe,eAAe,CAAC,sCAAsC,EAAEV,SAAS,CAAC;IAC1F,CAAC;EACL;AACJ;AACAV,OAAO,CAACkB,OAAO,GAAGX,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}