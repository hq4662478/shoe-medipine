{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar client_1 = __importDefault(require(\"./parsers/client\"));\nvar device_1 = __importDefault(require(\"./parsers/device\"));\nvar operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\nvar vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\nvar browser_1 = __importDefault(require(\"./parsers/client/browser\"));\nvar BotParser = require(\"./parsers/bot\");\nvar user_agent_1 = require(\"./utils/user-agent\");\nvar version_compare_1 = require(\"./utils/version-compare\");\nvar DeviceDetector = /*#__PURE__*/_createClass(function DeviceDetector(options) {\n  var _this = this;\n  _classCallCheck(this, DeviceDetector);\n  // Default options\n  this.options = {\n    skipBotDetection: false,\n    versionTruncation: 1\n  };\n  this.parse = function (userAgent) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    var result = {\n      client: _this.clientParser.parse(userAgent),\n      os: _this.operatingSystemParser.parse(userAgent),\n      device: _this.deviceParser.parse(userAgent),\n      bot: _this.options.skipBotDetection ? null : _this.botParser.parse(userAgent)\n    };\n    var osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n    var osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n    var osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n    if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n      var brand = _this.vendorFragmentParser.parse(userAgent);\n      if (brand) {\n        if (!result.device) {\n          result.device = _this.createDeviceObject();\n        }\n        result.device.brand = brand;\n      }\n    }\n    /**\n     * Assume all devices running iOS / Mac OS are from Apple\n     */\n    if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"watchOS\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.brand = \"Apple\";\n    }\n    /**\n     * Chrome on Android passes the device type based on the keyword 'Mobile'\n     * If it is present the device should be a smartphone, otherwise it's a tablet\n     * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n     * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have\n     *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.\n     */\n    if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && user_agent_1.userAgentParser(\"Chrome/[\\\\.0-9]*\", userAgent)) {\n      if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?:Mobile|eliboM)\", userAgent)) {\n        if (!result.device) {\n          result.device = _this.createDeviceObject();\n        }\n        result.device.type = \"smartphone\";\n      } else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n        if (!result.device) {\n          result.device = _this.createDeviceObject();\n        }\n        result.device.type = \"tablet\";\n      }\n    }\n    /**\n     * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n     */\n    if (!((_f = result.device) === null || _f === void 0 ? void 0 : _f.type) && _this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"tablet\";\n    }\n    /**\n     * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n     */\n    if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && _this.hasAndroidMobileFragment(userAgent)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"smartphone\";\n    }\n    /**\n     * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n     * too late, there were a bunch of tablets running with 2.x\n     * With 4.0 the two trees were merged and it is for smartphones and tablets\n     *\n     * So were are expecting that all devices running Android < 2 are smartphones\n     * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n     */\n    if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && osName === \"Android\" && osVersion !== \"\") {\n      if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n        if (!result.device) {\n          result.device = _this.createDeviceObject();\n        }\n        result.device.type = \"smartphone\";\n      } else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n        if (!result.device) {\n          result.device = _this.createDeviceObject();\n        }\n        result.device.type = \"tablet\";\n      }\n    }\n    /**\n     * All detected feature phones running android are more likely smartphones\n     */\n    if (((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) === \"feature phone\" && osFamily === \"Android\") {\n      result.device.type = \"smartphone\";\n    }\n    /**\n     * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n     * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n     * UA string, the computer has touch capability, and is running Windows 8 (or later).\n     * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n     *\n     * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n     * all Windows 8 touch devices are tablets.\n     */\n    if (!((_k = result.device) === null || _k === void 0 ? void 0 : _k.type) && _this.isToucheEnabled(userAgent) && (osName === \"Windows RT\" || osName === \"Windows\" && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"tablet\";\n    }\n    /**\n     * All devices running Opera TV Store are assumed to be televisions\n     */\n    if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"television\";\n    }\n    /**\n     * All devices running Tizen TV or SmartTV are assumed to be televisions\n     */\n    if (user_agent_1.userAgentParser(\"SmartTV|Tizen.+ TV .+$\", userAgent)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"television\";\n    }\n    /**\n     * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n     */\n    if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_m = result.client) === null || _m === void 0 ? void 0 : _m.name) || \"\")) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"television\";\n    }\n    /**\n     * Set device type to desktop if string ua contains desktop\n     */\n    var hasDesktop = \"desktop\" !== ((_o = result.device) === null || _o === void 0 ? void 0 : _o.type) && null !== user_agent_1.userAgentParser(\"Desktop\", userAgent) && _this.hasDesktopFragment(userAgent);\n    if (hasDesktop) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"desktop\";\n    }\n    // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n    if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && _this.isDesktop(result, osFamily)) {\n      if (!result.device) {\n        result.device = _this.createDeviceObject();\n      }\n      result.device.type = \"desktop\";\n    }\n    return result;\n  };\n  this.hasAndroidMobileFragment = function (userAgent) {\n    return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n  };\n  this.hasAndroidTabletFragment = function (userAgent) {\n    return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n  };\n  this.hasDesktopFragment = function (userAgent) {\n    return user_agent_1.userAgentParser(\"Desktop (x(?:32|64)|WOW64);\", userAgent);\n  };\n  this.isDesktop = function (result, osFamily) {\n    if (!result.os) {\n      return false;\n    }\n    // Check for browsers available for mobile devices only\n    if (_this.usesMobileBrowser(result.client)) {\n      return false;\n    }\n    return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n  };\n  this.usesMobileBrowser = function (client) {\n    var _a, _b;\n    if (!client) return false;\n    return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n  };\n  this.isToucheEnabled = function (userAgent) {\n    return user_agent_1.userAgentParser(\"Touch\", userAgent);\n  };\n  this.createDeviceObject = function () {\n    return {\n      type: \"\",\n      brand: \"\",\n      model: \"\"\n    };\n  };\n  this.options = Object.assign(Object.assign({}, this.options), options);\n  this.clientParser = new client_1.default(this.options);\n  this.deviceParser = new device_1.default();\n  this.operatingSystemParser = new operating_system_1.default(this.options);\n  this.vendorFragmentParser = new vendor_fragment_1.default();\n  this.botParser = new BotParser();\n});\nmodule.exports = DeviceDetector;","map":{"version":3,"names":["_createClass","require","default","_classCallCheck","__importDefault","mod","__esModule","client_1","device_1","operating_system_1","vendor_fragment_1","browser_1","BotParser","user_agent_1","version_compare_1","DeviceDetector","options","_this","skipBotDetection","versionTruncation","parse","userAgent","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","result","client","clientParser","os","operatingSystemParser","device","deviceParser","bot","botParser","osName","name","osVersion","version","osFamily","getOsFamily","brand","vendorFragmentParser","createDeviceObject","includes","type","userAgentParser","hasAndroidTabletFragment","hasAndroidMobileFragment","versionCompare","isToucheEnabled","hasDesktop","hasDesktopFragment","isDesktop","usesMobileBrowser","getDesktopOsArray","isMobileOnlyBrowser","model","Object","assign","module","exports"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst client_1 = __importDefault(require(\"./parsers/client\"));\nconst device_1 = __importDefault(require(\"./parsers/device\"));\nconst operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\nconst vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\nconst browser_1 = __importDefault(require(\"./parsers/client/browser\"));\nconst BotParser = require(\"./parsers/bot\");\nconst user_agent_1 = require(\"./utils/user-agent\");\nconst version_compare_1 = require(\"./utils/version-compare\");\nclass DeviceDetector {\n    constructor(options) {\n        // Default options\n        this.options = {\n            skipBotDetection: false,\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n            const result = {\n                client: this.clientParser.parse(userAgent),\n                os: this.operatingSystemParser.parse(userAgent),\n                device: this.deviceParser.parse(userAgent),\n                bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)\n            };\n            const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n            const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n            const osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n            if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n                const brand = this.vendorFragmentParser.parse(userAgent);\n                if (brand) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.brand = brand;\n                }\n            }\n            /**\n             * Assume all devices running iOS / Mac OS are from Apple\n             */\n            if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"watchOS\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.brand = \"Apple\";\n            }\n            /**\n             * Chrome on Android passes the device type based on the keyword 'Mobile'\n             * If it is present the device should be a smartphone, otherwise it's a tablet\n             * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n             * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have\n             *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.\n             */\n            if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && user_agent_1.userAgentParser(\"Chrome/[\\\\.0-9]*\", userAgent)) {\n                if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?:Mobile|eliboM)\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n             */\n            if (!((_f = result.device) === null || _f === void 0 ? void 0 : _f.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n             */\n            if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidMobileFragment(userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n             * too late, there were a bunch of tablets running with 2.x\n             * With 4.0 the two trees were merged and it is for smartphones and tablets\n             *\n             * So were are expecting that all devices running Android < 2 are smartphones\n             * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n             */\n            if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && osName === \"Android\" && osVersion !== \"\") {\n                if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * All detected feature phones running android are more likely smartphones\n             */\n            if (((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) === \"feature phone\" && osFamily === \"Android\") {\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n             * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n             * UA string, the computer has touch capability, and is running Windows 8 (or later).\n             * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n             *\n             * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n             * all Windows 8 touch devices are tablets.\n             */\n            if (!((_k = result.device) === null || _k === void 0 ? void 0 : _k.type)\n                && this.isToucheEnabled(userAgent)\n                && (osName === \"Windows RT\"\n                    || (osName === \"Windows\"\n                        && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0))) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * All devices running Opera TV Store are assumed to be televisions\n             */\n            if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * All devices running Tizen TV or SmartTV are assumed to be televisions\n             */\n            if (user_agent_1.userAgentParser(\"SmartTV|Tizen.+ TV .+$\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n             */\n            if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_m = result.client) === null || _m === void 0 ? void 0 : _m.name) || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * Set device type to desktop if string ua contains desktop\n             */\n            const hasDesktop = \"desktop\" !== ((_o = result.device) === null || _o === void 0 ? void 0 : _o.type)\n                && null !== user_agent_1.userAgentParser(\"Desktop\", userAgent)\n                && this.hasDesktopFragment(userAgent);\n            if (hasDesktop) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"desktop\";\n            }\n            // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n            if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"desktop\";\n            }\n            return result;\n        };\n        this.hasAndroidMobileFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n        };\n        this.hasAndroidTabletFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n        };\n        this.hasDesktopFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Desktop (x(?:32|64)|WOW64);\", userAgent);\n        };\n        this.isDesktop = (result, osFamily) => {\n            if (!result.os) {\n                return false;\n            }\n            // Check for browsers available for mobile devices only\n            if (this.usesMobileBrowser(result.client)) {\n                return false;\n            }\n            return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n        };\n        this.usesMobileBrowser = (client) => {\n            var _a, _b;\n            if (!client)\n                return false;\n            return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n        };\n        this.isToucheEnabled = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Touch\", userAgent);\n        };\n        this.createDeviceObject = () => ({\n            type: \"\",\n            brand: \"\",\n            model: \"\"\n        });\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.clientParser = new client_1.default(this.options);\n        this.deviceParser = new device_1.default();\n        this.operatingSystemParser = new operating_system_1.default(this.options);\n        this.vendorFragmentParser = new vendor_fragment_1.default();\n        this.botParser = new BotParser();\n    }\n}\nmodule.exports = DeviceDetector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}