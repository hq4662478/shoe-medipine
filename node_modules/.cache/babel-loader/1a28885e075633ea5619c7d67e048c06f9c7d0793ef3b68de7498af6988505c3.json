{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createClass = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\nvar variable_replacement_1 = require(\"../../utils/variable-replacement\");\nvar user_agent_1 = require(\"../../utils/user-agent\");\nvar model_1 = require(\"../../utils/model\");\nvar TelevisionParser = /*#__PURE__*/_createClass(function TelevisionParser() {\n  var _this = this;\n  _classCallCheck(this, TelevisionParser);\n  this.parse = function (userAgent) {\n    var result = {\n      type: \"\",\n      brand: \"\",\n      model: \"\"\n    };\n    if (!_this.isHbbTv(userAgent)) return result;\n    result.type = \"television\";\n    for (var _i = 0, _Object$entries = Object.entries(televisions_json_1.default); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        brand = _Object$entries$_i[0],\n        television = _Object$entries$_i[1];\n      var match = user_agent_1.userAgentParser(television.regex, userAgent);\n      if (!match) continue;\n      result.brand = brand;\n      if (\"model\" in television && television.model) {\n        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n      } else if (\"models\" in television && television.models) {\n        var _iterator = _createForOfIteratorHelper(television.models),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var model = _step.value;\n            var modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!modelMatch) continue;\n            result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n            break;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      break;\n    }\n    return result;\n  };\n  this.isHbbTv = function (userAgent) {\n    return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n  };\n});\nexports.default = TelevisionParser;","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","_slicedToArray","_createClass","_classCallCheck","__importDefault","mod","__esModule","Object","defineProperty","exports","value","televisions_json_1","variable_replacement_1","user_agent_1","model_1","TelevisionParser","_this","parse","userAgent","result","type","brand","model","isHbbTv","_i","_Object$entries","entries","length","_Object$entries$_i","television","match","userAgentParser","regex","buildModel","variableReplacement","trim","models","_iterator","_step","s","n","done","modelMatch","err","e","f"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/device/televisions.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass TelevisionParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            if (!this.isHbbTv(userAgent))\n                return result;\n            result.type = \"television\";\n            for (const [brand, television] of Object.entries(televisions_json_1.default)) {\n                const match = user_agent_1.userAgentParser(television.regex, userAgent);\n                if (!match)\n                    continue;\n                result.brand = brand;\n                if (\"model\" in television && television.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n                }\n                else if (\"models\" in television && television.models) {\n                    for (const model of television.models) {\n                        const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!modelMatch)\n                            continue;\n                        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n                        break;\n                    }\n                }\n                break;\n            }\n            return result;\n        };\n        this.isHbbTv = (userAgent) => {\n            return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n        };\n    }\n}\nexports.default = TelevisionParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}