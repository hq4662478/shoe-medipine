{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browsers.json\"));\nconst browser_engine_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browser_engine.json\"));\nconst available_browsers_json_1 = __importDefault(require(\"./fixtures/available-browsers.json\"));\nconst mobile_only_browsers_json_1 = __importDefault(require(\"./fixtures/mobile-only-browsers.json\"));\nclass BrowserParser {\n  constructor(options) {\n    this.options = {\n      versionTruncation: 1\n    };\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        name: \"\",\n        version: \"\",\n        engine: \"\",\n        engineVersion: \"\"\n      };\n      for (const browser of browsers_json_1.default) {\n        const match = user_agent_1.userAgentParser(browser.regex, userAgent);\n        if (!match) continue;\n        const vrpVersion = variable_replacement_1.variableReplacement(browser.version, match);\n        const version = version_1.formatVersion(vrpVersion, this.options.versionTruncation);\n        const shortVersion = version && parseFloat(version_1.formatVersion(vrpVersion, 1)) || \"\";\n        if (browser.engine) {\n          result.engine = browser.engine.default;\n          if (browser.engine && browser.engine.versions && shortVersion) {\n            const sortedEngineVersions = Object.entries(browser.engine.versions).sort((a, b) => {\n              return parseFloat(a[0]) > parseFloat(b[0]) ? 1 : -1;\n            });\n            for (const [versionThreshold, engineByVersion] of sortedEngineVersions) {\n              if (parseFloat(versionThreshold) <= shortVersion) {\n                result.engine = engineByVersion || \"\";\n              }\n            }\n          }\n        }\n        result.type = \"browser\";\n        result.name = variable_replacement_1.variableReplacement(browser.name, match);\n        result.version = version;\n        break;\n      }\n      if (!result.engine) {\n        for (const browserEngine of browser_engine_json_1.default) {\n          let match = null;\n          try {\n            match = RegExp(browserEngine.regex, \"i\").exec(userAgent);\n          } catch (_a) {\n            // TODO: find out why it fails in some browsers\n          }\n          if (!match) continue;\n          result.engine = browserEngine.name;\n          break;\n        }\n      }\n      result.engineVersion = version_1.formatVersion(version_1.parseBrowserEngineVersion(userAgent, result.engine), this.options.versionTruncation);\n      return result;\n    };\n    this.options = Object.assign(Object.assign({}, this.options), options);\n  }\n}\nexports.default = BrowserParser;\nBrowserParser.getBrowserShortName = browserName => {\n  for (const [shortName, name] of Object.entries(available_browsers_json_1.default)) {\n    if (name === browserName) {\n      return shortName;\n    }\n  }\n  return \"\";\n};\nBrowserParser.isMobileOnlyBrowser = browserName => {\n  return mobile_only_browsers_json_1.default.includes(BrowserParser.getBrowserShortName(browserName));\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","version_1","require","variable_replacement_1","user_agent_1","browsers_json_1","browser_engine_json_1","available_browsers_json_1","mobile_only_browsers_json_1","BrowserParser","constructor","options","versionTruncation","parse","userAgent","result","type","name","version","engine","engineVersion","browser","default","match","userAgentParser","regex","vrpVersion","variableReplacement","formatVersion","shortVersion","parseFloat","versions","sortedEngineVersions","entries","sort","a","b","versionThreshold","engineByVersion","browserEngine","RegExp","exec","_a","parseBrowserEngineVersion","assign","getBrowserShortName","browserName","shortName","isMobileOnlyBrowser","includes"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/client/browser.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browsers.json\"));\nconst browser_engine_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browser_engine.json\"));\nconst available_browsers_json_1 = __importDefault(require(\"./fixtures/available-browsers.json\"));\nconst mobile_only_browsers_json_1 = __importDefault(require(\"./fixtures/mobile-only-browsers.json\"));\nclass BrowserParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                name: \"\",\n                version: \"\",\n                engine: \"\",\n                engineVersion: \"\"\n            };\n            for (const browser of browsers_json_1.default) {\n                const match = user_agent_1.userAgentParser(browser.regex, userAgent);\n                if (!match)\n                    continue;\n                const vrpVersion = variable_replacement_1.variableReplacement(browser.version, match);\n                const version = version_1.formatVersion(vrpVersion, this.options.versionTruncation);\n                const shortVersion = version && parseFloat(version_1.formatVersion(vrpVersion, 1)) || \"\";\n                if (browser.engine) {\n                    result.engine = browser.engine.default;\n                    if (browser.engine && browser.engine.versions && shortVersion) {\n                        const sortedEngineVersions = Object.entries(browser.engine.versions).sort((a, b) => {\n                            return parseFloat(a[0]) > parseFloat(b[0]) ? 1 : -1;\n                        });\n                        for (const [versionThreshold, engineByVersion] of sortedEngineVersions) {\n                            if (parseFloat(versionThreshold) <= shortVersion) {\n                                result.engine = engineByVersion || \"\";\n                            }\n                        }\n                    }\n                }\n                result.type = \"browser\";\n                result.name = variable_replacement_1.variableReplacement(browser.name, match);\n                result.version = version;\n                break;\n            }\n            if (!result.engine) {\n                for (const browserEngine of browser_engine_json_1.default) {\n                    let match = null;\n                    try {\n                        match = RegExp(browserEngine.regex, \"i\").exec(userAgent);\n                    }\n                    catch (_a) {\n                        // TODO: find out why it fails in some browsers\n                    }\n                    if (!match)\n                        continue;\n                    result.engine = browserEngine.name;\n                    break;\n                }\n            }\n            result.engineVersion = version_1.formatVersion(version_1.parseBrowserEngineVersion(userAgent, result.engine), this.options.versionTruncation);\n            return result;\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = BrowserParser;\nBrowserParser.getBrowserShortName = (browserName) => {\n    for (const [shortName, name] of Object.entries(available_browsers_json_1.default)) {\n        if (name === browserName) {\n            return shortName;\n        }\n    }\n    return \"\";\n};\nBrowserParser.isMobileOnlyBrowser = (browserName) => {\n    return mobile_only_browsers_json_1.default.includes(BrowserParser.getBrowserShortName(browserName));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}