{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst mobiles_json_1 = __importDefault(require(\"../../fixtures/regexes/device/mobiles.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass MobileParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n      let resultType = \"\";\n      for (const [brand, mobile] of Object.entries(mobiles_json_1.default)) {\n        const match = user_agent_1.userAgentParser(mobile.regex, userAgent);\n        if (!match) continue;\n        resultType = \"device\" in mobile && mobile.device || \"\";\n        result.brand = brand;\n        if (\"model\" in mobile && mobile.model) {\n          result.model = model_1.buildModel(variable_replacement_1.variableReplacement(mobile.model, match)).trim();\n        } else if (\"models\" in mobile && mobile.models) {\n          for (const model of mobile.models) {\n            const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!modelMatch) continue;\n            result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n            if (\"device\" in model && model.device) {\n              resultType = model.device;\n            }\n            if (\"brand\" in model) {\n              result.brand = model.brand || \"\";\n            }\n            break;\n          }\n        }\n        break;\n      }\n      // Sanitize device type\n      if (resultType === \"tv\") {\n        result.type = \"television\";\n      } else if (resultType === \"car browser\") {\n        result.type = \"car\";\n      } else {\n        result.type = resultType;\n      }\n      // Sanitize device brand\n      if (result.brand === \"Unknown\") {\n        result.brand = \"\";\n      }\n      return result;\n    };\n  }\n}\nexports.default = MobileParser;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","mobiles_json_1","require","variable_replacement_1","user_agent_1","model_1","MobileParser","constructor","parse","userAgent","result","type","brand","model","resultType","mobile","entries","default","match","userAgentParser","regex","device","buildModel","variableReplacement","trim","models","modelMatch"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/device/mobiles.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mobiles_json_1 = __importDefault(require(\"../../fixtures/regexes/device/mobiles.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass MobileParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            let resultType = \"\";\n            for (const [brand, mobile] of Object.entries(mobiles_json_1.default)) {\n                const match = user_agent_1.userAgentParser(mobile.regex, userAgent);\n                if (!match)\n                    continue;\n                resultType = \"device\" in mobile && mobile.device || \"\";\n                result.brand = brand;\n                if (\"model\" in mobile && mobile.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(mobile.model, match)).trim();\n                }\n                else if (\"models\" in mobile && mobile.models) {\n                    for (const model of mobile.models) {\n                        const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!modelMatch)\n                            continue;\n                        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n                        if (\"device\" in model && model.device) {\n                            resultType = model.device;\n                        }\n                        if (\"brand\" in model) {\n                            result.brand = model.brand || \"\";\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n            // Sanitize device type\n            if (resultType === \"tv\") {\n                result.type = \"television\";\n            }\n            else if (resultType === \"car browser\") {\n                result.type = \"car\";\n            }\n            else {\n                result.type = resultType;\n            }\n            // Sanitize device brand\n            if (result.brand === \"Unknown\") {\n                result.brand = \"\";\n            }\n            return result;\n        };\n    }\n}\nexports.default = MobileParser;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,cAAc,GAAGP,eAAe,CAACQ,OAAO,CAAC,4CAA4C,CAAC,CAAC;AAC7F,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMI,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,KAAK,GAAIC,SAAS,IAAK;MACxB,MAAMC,MAAM,GAAG;QACXC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE;MACX,CAAC;MACD,IAAIC,UAAU,GAAG,EAAE;MACnB,KAAK,MAAM,CAACF,KAAK,EAAEG,MAAM,CAAC,IAAIlB,MAAM,CAACmB,OAAO,CAACf,cAAc,CAACgB,OAAO,CAAC,EAAE;QAClE,MAAMC,KAAK,GAAGd,YAAY,CAACe,eAAe,CAACJ,MAAM,CAACK,KAAK,EAAEX,SAAS,CAAC;QACnE,IAAI,CAACS,KAAK,EACN;QACJJ,UAAU,GAAG,QAAQ,IAAIC,MAAM,IAAIA,MAAM,CAACM,MAAM,IAAI,EAAE;QACtDX,MAAM,CAACE,KAAK,GAAGA,KAAK;QACpB,IAAI,OAAO,IAAIG,MAAM,IAAIA,MAAM,CAACF,KAAK,EAAE;UACnCH,MAAM,CAACG,KAAK,GAAGR,OAAO,CAACiB,UAAU,CAACnB,sBAAsB,CAACoB,mBAAmB,CAACR,MAAM,CAACF,KAAK,EAAEK,KAAK,CAAC,CAAC,CAACM,IAAI,EAAE;QAC7G,CAAC,MACI,IAAI,QAAQ,IAAIT,MAAM,IAAIA,MAAM,CAACU,MAAM,EAAE;UAC1C,KAAK,MAAMZ,KAAK,IAAIE,MAAM,CAACU,MAAM,EAAE;YAC/B,MAAMC,UAAU,GAAGtB,YAAY,CAACe,eAAe,CAACN,KAAK,CAACO,KAAK,EAAEX,SAAS,CAAC;YACvE,IAAI,CAACiB,UAAU,EACX;YACJhB,MAAM,CAACG,KAAK,GAAGR,OAAO,CAACiB,UAAU,CAACnB,sBAAsB,CAACoB,mBAAmB,CAACV,KAAK,CAACA,KAAK,EAAEa,UAAU,CAAC,CAAC,CAACF,IAAI,EAAE;YAC7G,IAAI,QAAQ,IAAIX,KAAK,IAAIA,KAAK,CAACQ,MAAM,EAAE;cACnCP,UAAU,GAAGD,KAAK,CAACQ,MAAM;YAC7B;YACA,IAAI,OAAO,IAAIR,KAAK,EAAE;cAClBH,MAAM,CAACE,KAAK,GAAGC,KAAK,CAACD,KAAK,IAAI,EAAE;YACpC;YACA;UACJ;QACJ;QACA;MACJ;MACA;MACA,IAAIE,UAAU,KAAK,IAAI,EAAE;QACrBJ,MAAM,CAACC,IAAI,GAAG,YAAY;MAC9B,CAAC,MACI,IAAIG,UAAU,KAAK,aAAa,EAAE;QACnCJ,MAAM,CAACC,IAAI,GAAG,KAAK;MACvB,CAAC,MACI;QACDD,MAAM,CAACC,IAAI,GAAGG,UAAU;MAC5B;MACA;MACA,IAAIJ,MAAM,CAACE,KAAK,KAAK,SAAS,EAAE;QAC5BF,MAAM,CAACE,KAAK,GAAG,EAAE;MACrB;MACA,OAAOF,MAAM;IACjB,CAAC;EACL;AACJ;AACAX,OAAO,CAACkB,OAAO,GAAGX,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}