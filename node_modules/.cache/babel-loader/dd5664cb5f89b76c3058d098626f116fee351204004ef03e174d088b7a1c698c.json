{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = operating_system_json_1.default.operatingSystem;\nconst osFamilies = operating_system_json_1.default.osFamilies;\nclass OperatingSystemParser {\n  constructor(options) {\n    this.options = {\n      versionTruncation: 1\n    };\n    this.parse = userAgent => {\n      const result = {\n        name: \"\",\n        version: \"\",\n        platform: this.parsePlatform(userAgent)\n      };\n      for (const operatingSystem of oss_json_1.default) {\n        const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n        if (!match) continue;\n        result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n        result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n        if (result.name === \"lubuntu\") {\n          result.name = \"Lubuntu\";\n        }\n        if (result.name === \"debian\") {\n          result.name = \"Debian\";\n        }\n        if (result.name === \"YunOS\") {\n          result.name = \"YunOs\";\n        }\n        return result;\n      }\n      return null;\n    };\n    this.parsePlatform = userAgent => {\n      if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n        return \"ARM\";\n      }\n      if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n        return \"MIPS\";\n      }\n      if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n        return \"SuperH\";\n      }\n      if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_?64\", userAgent)) {\n        return \"x64\";\n      }\n      if (user_agent_1.userAgentParser(\"(?:i[0-9]|x)86|i86pc\", userAgent)) {\n        return \"x86\";\n      }\n      return \"\";\n    };\n    this.options = Object.assign(Object.assign({}, this.options), options);\n  }\n}\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\nOperatingSystemParser.getOsFamily = osName => {\n  const osShortName = OperatingSystemParser.getOsShortName(osName);\n  for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n    if (shortNames.includes(osShortName)) {\n      return osFamily;\n    }\n  }\n  return \"\";\n};\nOperatingSystemParser.getOsShortName = osName => {\n  for (const [shortName, name] of Object.entries(shortOsNames)) {\n    if (name === osName) return shortName;\n  }\n  return \"\";\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","oss_json_1","require","version_1","variable_replacement_1","user_agent_1","operating_system_json_1","desktopOsArray","shortOsNames","default","operatingSystem","osFamilies","OperatingSystemParser","constructor","options","versionTruncation","parse","userAgent","result","name","version","platform","parsePlatform","match","userAgentParser","regex","variableReplacement","formatVersion","assign","getDesktopOsArray","getOsFamily","osName","osShortName","getOsShortName","osFamily","shortNames","entries","includes","shortName"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/operating-system/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = operating_system_json_1.default.operatingSystem;\nconst osFamilies = operating_system_json_1.default.osFamilies;\nclass OperatingSystemParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                name: \"\",\n                version: \"\",\n                platform: this.parsePlatform(userAgent)\n            };\n            for (const operatingSystem of oss_json_1.default) {\n                const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n                if (!match)\n                    continue;\n                result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n                result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n                if (result.name === \"lubuntu\") {\n                    result.name = \"Lubuntu\";\n                }\n                if (result.name === \"debian\") {\n                    result.name = \"Debian\";\n                }\n                if (result.name === \"YunOS\") {\n                    result.name = \"YunOs\";\n                }\n                return result;\n            }\n            return null;\n        };\n        this.parsePlatform = (userAgent) => {\n            if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n                return \"ARM\";\n            }\n            if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n                return \"MIPS\";\n            }\n            if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n                return \"SuperH\";\n            }\n            if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_?64\", userAgent)) {\n                return \"x64\";\n            }\n            if (user_agent_1.userAgentParser(\"(?:i[0-9]|x)86|i86pc\", userAgent)) {\n                return \"x86\";\n            }\n            return \"\";\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\nOperatingSystemParser.getOsFamily = (osName) => {\n    const osShortName = OperatingSystemParser.getOsShortName(osName);\n    for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n        if (shortNames.includes(osShortName)) {\n            return osFamily;\n        }\n    }\n    return \"\";\n};\nOperatingSystemParser.getOsShortName = (osName) => {\n    for (const [shortName, name] of Object.entries(shortOsNames)) {\n        if (name === osName)\n            return shortName;\n    }\n    return \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}