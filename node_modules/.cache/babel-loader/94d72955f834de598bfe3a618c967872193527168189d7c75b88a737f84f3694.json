{"ast":null,"code":"var _jsxFileName = \"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\n// import { drawLandmarks } from '@mediapipe/drawing_utils';\nimport { Objectron } from '@mediapipe/objectron';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst controls = window;\nconst drawingUtils = window;\nconst mpObjectron = window;\n// const fpsControl = new controls.FPS();\n\nfunction App() {\n  const videoElement = document.getElementsByClassName('input_video')[0];\n  const canvasElement = document.getElementsByClassName('output_canvas')[0];\n  const controlsElement = document.getElementsByClassName('control-panel')[0];\n  const canvasCtx = canvasElement.getContext('2d');\n\n  // function onResults(results: any) {\n  //   canvasCtx.save();\n  //   canvasCtx.drawImage(\n  //       results.image, 0, 0, canvasElement.width, canvasElement.height);\n  //   if (!!results.objectDetections) {\n  //     for (const detectedObject of results.objectDetections) {\n  //       // Reformat keypoint information as landmarks, for easy drawing.\n  //       const landmarks: mpObjectron.Point2D[] =\n  //           detectedObject.keypoints.map(x => x.point2d);\n  //       // Draw bounding box.\n  //       drawingUtils.drawConnectors(canvasCtx, landmarks,\n  //           mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n  //       // Draw centroid.\n  //       drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n  //     }\n  //   }\n  //   canvasCtx.restore();\n  // }\n\n  function onResults(results) {\n    // Hide the spinner.\n    document.body.classList.add('loaded');\n\n    // Update the frame rate.\n    // fpsControl.tick();\n\n    // Draw the overlays.\n    canvasCtx.save();\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (!!results.objectDetections) {\n      for (const detectedObject of results.objectDetections) {\n        // Reformat keypoint information as landmarks, for easy drawing.\n        // const landmarks:any =\n        //     detectedObject.keypoints.map(x => x.point2d);\n        // Draw bounding box.\n        // drawingUtils.drawConnectors(canvasCtx, landmarks,\n        //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n\n        // Draw Axes\n        // drawAxes(canvasCtx, landmarks, {\n        //   x: '#00FF00',\n        //   y: '#FF0000',\n        //   z: '#0000FF',\n        // });\n        // Draw centroid.\n        drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {\n          color: '#FFFFFF'\n        });\n      }\n    }\n    canvasCtx.restore();\n  }\n  const objectron = new Objectron({\n    locateFile: file => {\n      return 'object_detection_3d_cup.tflite';\n      // return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    }\n  });\n\n  objectron.setOptions({\n    modelName: 'Cup',\n    maxNumObjects: 3\n  });\n  objectron.onResults(onResults);\n  const camera = new Camera(videoElement, {\n    onFrame: async () => {\n      await objectron.send({\n        image: videoElement\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Objectron","jsxDEV","_jsxDEV","controls","window","drawingUtils","mpObjectron","App","videoElement","document","getElementsByClassName","canvasElement","controlsElement","canvasCtx","getContext","onResults","results","body","classList","add","save","drawImage","image","width","height","objectDetections","detectedObject","drawLandmarks","landmarks","color","restore","objectron","locateFile","file","setOptions","modelName","maxNumObjects","camera","Camera","onFrame","send","start","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import { drawLandmarks } from '@mediapipe/drawing_utils';\nimport { Objectron } from '@mediapipe/objectron';\n\n\nconst controls = window;\nconst drawingUtils = window;\nconst mpObjectron = window;\n// const fpsControl = new controls.FPS();\n\nfunction App() {\n\n\n  const videoElement =\n    document.getElementsByClassName('input_video')[0] as HTMLVideoElement;\n  const canvasElement =\n    document.getElementsByClassName('output_canvas')[0] as HTMLCanvasElement;\n  const controlsElement =\n    document.getElementsByClassName('control-panel')[0] as HTMLDivElement;\n  const canvasCtx = canvasElement.getContext('2d')!;\n\n    // function onResults(results: any) {\n    //   canvasCtx.save();\n    //   canvasCtx.drawImage(\n    //       results.image, 0, 0, canvasElement.width, canvasElement.height);\n    //   if (!!results.objectDetections) {\n    //     for (const detectedObject of results.objectDetections) {\n    //       // Reformat keypoint information as landmarks, for easy drawing.\n    //       const landmarks: mpObjectron.Point2D[] =\n    //           detectedObject.keypoints.map(x => x.point2d);\n    //       // Draw bounding box.\n    //       drawingUtils.drawConnectors(canvasCtx, landmarks,\n    //           mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n    //       // Draw centroid.\n    //       drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n    //     }\n    //   }\n    //   canvasCtx.restore();\n    // }\n    \n\n    function onResults(results: any): void {\n      // Hide the spinner.\n      document.body.classList.add('loaded');\n    \n      // Update the frame rate.\n      // fpsControl.tick();\n    \n      // Draw the overlays.\n      canvasCtx.save();\n      canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n      if (!!results.objectDetections) {\n        for (const detectedObject of results.objectDetections) {\n          // Reformat keypoint information as landmarks, for easy drawing.\n          // const landmarks:any =\n          //     detectedObject.keypoints.map(x => x.point2d);\n          // Draw bounding box.\n          // drawingUtils.drawConnectors(canvasCtx, landmarks,\n          //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n    \n          // Draw Axes\n          // drawAxes(canvasCtx, landmarks, {\n          //   x: '#00FF00',\n          //   y: '#FF0000',\n          //   z: '#0000FF',\n          // });\n          // Draw centroid.\n          drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n        }\n      }\n      canvasCtx.restore();\n    }\n\n\n    \n    const objectron = new Objectron({locateFile: (file: any) => {\n      return 'object_detection_3d_cup.tflite';\n      // return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    }});\n    objectron.setOptions({\n      modelName: 'Cup',\n      maxNumObjects: 3,\n    });\n    objectron.onResults(onResults);\n    \n    const camera = new Camera(videoElement, {\n      onFrame: async () => {\n        await objectron.send({image: videoElement});\n      },\n      width: 1280,\n      height: 720\n    });\n    camera.start();\n\n\n\n  return (\n    <div className=\"App\">\n      {/* <div class=\"container\">\n        <video class=\"input_video\"></video>\n        <canvas class=\"output_canvas\" width=\"1280px\" height=\"720px\"></canvas>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAClB;AACA,SAASC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,QAAQ,GAAGC,MAAM;AACvB,MAAMC,YAAY,GAAGD,MAAM;AAC3B,MAAME,WAAW,GAAGF,MAAM;AAC1B;;AAEA,SAASG,GAAGA,CAAA,EAAG;EAGb,MAAMC,YAAY,GAChBC,QAAQ,CAACC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAqB;EACvE,MAAMC,aAAa,GACjBF,QAAQ,CAACC,sBAAsB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAsB;EAC1E,MAAME,eAAe,GACnBH,QAAQ,CAACC,sBAAsB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAmB;EACvE,MAAMG,SAAS,GAAGF,aAAa,CAACG,UAAU,CAAC,IAAI,CAAE;;EAE/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,SAASC,SAASA,CAACC,OAAY,EAAQ;IACrC;IACAP,QAAQ,CAACQ,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;;IAErC;IACA;;IAEA;IACAN,SAAS,CAACO,IAAI,EAAE;IAChBP,SAAS,CAACQ,SAAS,CAACL,OAAO,CAACM,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEX,aAAa,CAACY,KAAK,EAAEZ,aAAa,CAACa,MAAM,CAAC;IACnF,IAAI,CAAC,CAACR,OAAO,CAACS,gBAAgB,EAAE;MAC9B,KAAK,MAAMC,cAAc,IAAIV,OAAO,CAACS,gBAAgB,EAAE;QACrD;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACApB,YAAY,CAACsB,aAAa,CAACd,SAAS,EAAE,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;UAACC,KAAK,EAAE;QAAS,CAAC,CAAC;MAC3E;IACF;IACAhB,SAAS,CAACiB,OAAO,EAAE;EACrB;EAIA,MAAMC,SAAS,GAAG,IAAI/B,SAAS,CAAC;IAACgC,UAAU,EAAGC,IAAS,IAAK;MAC1D,OAAO,gCAAgC;MACvC;IACF;EAAC,CAAC,CAAC;;EACHF,SAAS,CAACG,UAAU,CAAC;IACnBC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE;EACjB,CAAC,CAAC;EACFL,SAAS,CAAChB,SAAS,CAACA,SAAS,CAAC;EAE9B,MAAMsB,MAAM,GAAG,IAAIC,MAAM,CAAC9B,YAAY,EAAE;IACtC+B,OAAO,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMR,SAAS,CAACS,IAAI,CAAC;QAAClB,KAAK,EAAEd;MAAY,CAAC,CAAC;IAC7C,CAAC;IACDe,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE;EACV,CAAC,CAAC;EACFa,MAAM,CAACI,KAAK,EAAE;EAIhB,oBACEvC,OAAA;IAAKwC,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAKd;AAEV;AAACC,EAAA,GA9FQxC,GAAG;AAgGZ,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}