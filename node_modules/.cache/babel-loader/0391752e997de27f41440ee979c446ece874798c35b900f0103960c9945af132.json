{"ast":null,"code":"var _jsxFileName = \"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport './styles.css';\n// import { drawLandmarks } from '@mediapipe/drawing_utils';\n// import {\n//   ControlPanel,\n//   FPS,\n//   StaticText,\n//   Slider,\n//   Toggle\n// } from '@mediapipe/control_utils/control_utils';\nimport { Objectron } from '@mediapipe/objectron';\nimport { Camera } from '@mediapipe/camera_utils';\nimport DeviceDetector from \"device-detector-js\";\n\n// import\n// Usage: testSupport({client?: string, os?: string}[])\n// Client and os are regular expressions.\n// See: https://cdn.jsdelivr.net/npm/device-detector-js@2.2.10/README.md for\n// legal values for client and os\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntestSupport([{\n  client: 'Chrome'\n}]);\nfunction testSupport(supportedDevices) {\n  const deviceDetector = new DeviceDetector();\n  const detectedDevice = deviceDetector.parse(navigator.userAgent);\n\n  // const detectedDevice_ = deviceDetector.parse(navigator.permissions.query({}));\n  // navigator.permissions.query({ name: \"camera\" }).then(res => {\n  //   if(res.state == \"granted\"){\n  //       // has permission\n  //   }\n  // });\n  // navigator.permissions.query({ name: 'camera' })\n\n  let isSupported = false;\n  for (const device of supportedDevices) {\n    if (device.client !== undefined) {\n      const re = new RegExp(`^${device.client}$`);\n      if (!re.test(detectedDevice.client.name)) {\n        continue;\n      }\n    }\n    if (device.os !== undefined) {\n      const re = new RegExp(`^${device.os}$`);\n      if (!re.test(detectedDevice.os.name)) {\n        continue;\n      }\n    }\n    isSupported = true;\n    break;\n  }\n  if (!isSupported) {\n    console.log(\"Bypass device not support\");\n    // alert(`This demo, running on ${detectedDevice.client.name}/${detectedDevice.os.name}, ` +\n    //       `is not well supported at this time, continue at your own risk.`);\n  }\n}\n\n// const fpsControl = new controls.FPS();\n\nfunction App() {\n  const controls = window;\n  const drawingUtils = window;\n  const mpObjectron = window;\n  const config = {\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron@0.3.1627447724/${file}`;\n    }\n  };\n  const videoElement = document.getElementsByClassName('input_video')[0];\n  const canvasElement = document.getElementsByClassName('output_canvas')[0];\n  const controlsElement = document.getElementsByClassName('control-panel')[0];\n  const canvasCtx = canvasElement.getContext('2d');\n\n  // function onResults(results: mpObjectron.Results): void {\n  //   // Hide the spinner.\n  //   document.body.classList.add('loaded');\n\n  //   console.log(results.image);\n  //   // Update the frame rate.\n  //   // fpsControl.tick();\n\n  //   // Draw the overlays.\n  //   canvasCtx.save();\n  //   canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n  //   if (!!results.objectDetections) {\n  //     for (const detectedObject of results.objectDetections) {\n  //       // Reformat keypoint information as landmarks, for easy drawing.\n  //       console.log(detectedObject);\n  //       // const landmarks:mpObjectron.Results =\n  //       //     detectedObject.keypoints.map(x => x.point2d);\n  //       // Draw bounding box.\n  //       // drawingUtils.drawConnectors(canvasCtx, landmarks,\n  //       //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n\n  //       // Draw Axes\n  //       // drawAxes(canvasCtx, landmarks, {\n  //       //   x: '#00FF00',\n  //       //   y: '#FF0000',\n  //       //   z: '#0000FF',\n  //       // });\n  //       // Draw centroid.\n  //       // drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n  //     }\n  //   }\n  //   canvasCtx.restore();\n  // }\n\n  function onResults(results) {\n    console.log(\"\", results);\n    canvasCtx.save();\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (!!results.objectDetections) {\n      for (const detectedObject of results.objectDetections) {\n        console.log(detectedObject);\n        // Reformat keypoint information as landmarks, for easy drawing.\n        // const landmarks: mpObjectron.Point2D[] =\n        //     detectedObject.keypoints.map(x => x.point2d);\n        // Draw bounding box.\n        // drawingUtils.drawConnectors(canvasCtx, landmarks,\n        //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n        // Draw centroid.\n        // drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n      }\n    }\n\n    canvasCtx.restore();\n  }\n\n  // const config = {locateFile: (file: File) => {\n  //   return `./object_detection_3d_sneakers.tflite`;\n  // }};\n  // const objectron = new Objectron({locateFile: (file) => {\n  //   return './object_detection_3d_sneakers.tflite';\n  // }});\n\n  // const objectron = new Objectron({locateFile: (file) => {\n  //   // return `./object_detection_3d_sneakers.tflite`;\n  //   return \"./object_detection_3d_sneakers.tflite\";\n  // }});\n\n  const objectron = new Objectron({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    }\n  });\n  objectron.setOptions({\n    modelName: 'Chair',\n    maxNumObjects: 3\n  });\n\n  // const objectron = new Objectron(config);\n\n  // objectron.setOptions({\n  //   modelName: 'Shoe',\n  //   maxNumObjects: 3,\n  // });\n  objectron.onResults(onResults);\n  const camera = new Camera(videoElement, {\n    onFrame: async () => {\n      await objectron.send({\n        image: videoElement\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n  // ###############################################################\n\n  // ###############################################################\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Objectron","Camera","DeviceDetector","jsxDEV","_jsxDEV","testSupport","client","supportedDevices","deviceDetector","detectedDevice","parse","navigator","userAgent","isSupported","device","undefined","re","RegExp","test","name","os","console","log","App","controls","window","drawingUtils","mpObjectron","config","locateFile","file","videoElement","document","getElementsByClassName","canvasElement","controlsElement","canvasCtx","getContext","onResults","results","save","drawImage","image","width","height","objectDetections","detectedObject","restore","objectron","setOptions","modelName","maxNumObjects","camera","onFrame","send","start","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\n// import { drawLandmarks } from '@mediapipe/drawing_utils';\n// import {\n//   ControlPanel,\n//   FPS,\n//   StaticText,\n//   Slider,\n//   Toggle\n// } from '@mediapipe/control_utils/control_utils';\nimport { Objectron, ObjectronConfig } from '@mediapipe/objectron';\nimport { Camera } from '@mediapipe/camera_utils';\nimport DeviceDetector from \"device-detector-js\";\n\n// import\n// Usage: testSupport({client?: string, os?: string}[])\n// Client and os are regular expressions.\n// See: https://cdn.jsdelivr.net/npm/device-detector-js@2.2.10/README.md for\n// legal values for client and os\ntestSupport([\n  {client: 'Chrome'},\n]);\n\nfunction testSupport(supportedDevices:{client?: string; os?: string;}[]) {\n  const deviceDetector = new DeviceDetector();\n  const detectedDevice = deviceDetector.parse(navigator.userAgent);\n\n  // const detectedDevice_ = deviceDetector.parse(navigator.permissions.query({}));\n  // navigator.permissions.query({ name: \"camera\" }).then(res => {\n  //   if(res.state == \"granted\"){\n  //       // has permission\n  //   }\n  // });\n  // navigator.permissions.query({ name: 'camera' })\n  \n  let isSupported = false;\n  for (const device of supportedDevices) {\n    if (device.client !== undefined) {\n      const re = new RegExp(`^${device.client}$`);\n      if (!re.test(detectedDevice.client.name)) {\n        continue;\n      }\n    }\n    if (device.os !== undefined) {\n      const re = new RegExp(`^${device.os}$`);\n      if (!re.test(detectedDevice.os.name)) {\n        continue;\n      }\n    }\n    isSupported = true;\n    break;\n  }\n  if (!isSupported) {\n    console.log(\"Bypass device not support\");\n    // alert(`This demo, running on ${detectedDevice.client.name}/${detectedDevice.os.name}, ` +\n    //       `is not well supported at this time, continue at your own risk.`);\n  }\n}\n\n\n// const fpsControl = new controls.FPS();\n\n\nfunction App() {\n\n  \n\n\n  const controls = window;\n  const drawingUtils = window;\n  const mpObjectron = window;\n\n  const config:ObjectronConfig = {locateFile: (file) => {\n    return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron@0.3.1627447724/${file}`;\n  }};\n\n  \n\n  const videoElement =\n    document.getElementsByClassName('input_video')[0] as HTMLVideoElement;\n  const canvasElement =\n    document.getElementsByClassName('output_canvas')[0] as HTMLCanvasElement;\n  const controlsElement =\n    document.getElementsByClassName('control-panel')[0] as HTMLDivElement;\n  const canvasCtx = canvasElement.getContext('2d')!;\n\n    \n\n    // function onResults(results: mpObjectron.Results): void {\n    //   // Hide the spinner.\n    //   document.body.classList.add('loaded');\n    \n    //   console.log(results.image);\n    //   // Update the frame rate.\n    //   // fpsControl.tick();\n    \n    //   // Draw the overlays.\n    //   canvasCtx.save();\n    //   canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n    //   if (!!results.objectDetections) {\n    //     for (const detectedObject of results.objectDetections) {\n    //       // Reformat keypoint information as landmarks, for easy drawing.\n    //       console.log(detectedObject);\n    //       // const landmarks:mpObjectron.Results =\n    //       //     detectedObject.keypoints.map(x => x.point2d);\n    //       // Draw bounding box.\n    //       // drawingUtils.drawConnectors(canvasCtx, landmarks,\n    //       //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n    \n    //       // Draw Axes\n    //       // drawAxes(canvasCtx, landmarks, {\n    //       //   x: '#00FF00',\n    //       //   y: '#FF0000',\n    //       //   z: '#0000FF',\n    //       // });\n    //       // Draw centroid.\n    //       // drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n    //     }\n    //   }\n    //   canvasCtx.restore();\n    // }\n\n\n    function onResults(results: any) {\n      console.log(\"\", results);\n      canvasCtx.save();\n      canvasCtx.drawImage(\n          results.image, 0, 0, canvasElement.width, canvasElement.height);\n      if (!!results.objectDetections) {\n        for (const detectedObject of results.objectDetections) {\n          console.log(detectedObject);\n          // Reformat keypoint information as landmarks, for easy drawing.\n          // const landmarks: mpObjectron.Point2D[] =\n          //     detectedObject.keypoints.map(x => x.point2d);\n          // Draw bounding box.\n          // drawingUtils.drawConnectors(canvasCtx, landmarks,\n          //     mpObjectron.BOX_CONNECTIONS, {color: '#FF0000'});\n          // Draw centroid.\n          // drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {color: '#FFFFFF'});\n        }\n      }\n      canvasCtx.restore();\n    }\n\n\n    // const config = {locateFile: (file: File) => {\n    //   return `./object_detection_3d_sneakers.tflite`;\n    // }};\n    // const objectron = new Objectron({locateFile: (file) => {\n    //   return './object_detection_3d_sneakers.tflite';\n    // }});\n    \n    // const objectron = new Objectron({locateFile: (file) => {\n    //   // return `./object_detection_3d_sneakers.tflite`;\n    //   return \"./object_detection_3d_sneakers.tflite\";\n    // }});\n\n    const objectron = new Objectron({locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    }});\n    objectron.setOptions({\n      modelName: 'Chair',\n      maxNumObjects: 3,\n    });\n\n    // const objectron = new Objectron(config);\n\n    // objectron.setOptions({\n    //   modelName: 'Shoe',\n    //   maxNumObjects: 3,\n    // });\n    objectron.onResults(onResults);\n    \n    const camera = new Camera(videoElement, {\n      onFrame: async () => {\n        await objectron.send({image: videoElement});\n      },\n      width: 1280,\n      height: 720\n    });\n    camera.start();\n// ###############################################################\n\n\n\n\n\n// ###############################################################\n  return (\n    <div className=\"App\">\n      {/* <div className=\"container\">\n        <video className=\"input_video\"></video>\n        <canvas className=\"output_canvas\" width=\"1280px\" height=\"720px\"></canvas>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}