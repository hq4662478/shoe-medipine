{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _createClass = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nvar version_1 = require(\"../../utils/version\");\nvar variable_replacement_1 = require(\"../../utils/variable-replacement\");\nvar user_agent_1 = require(\"../../utils/user-agent\");\nvar operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\nvar desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nvar shortOsNames = operating_system_json_1.default.operatingSystem;\nvar osFamilies = operating_system_json_1.default.osFamilies;\nvar OperatingSystemParser = /*#__PURE__*/_createClass(function OperatingSystemParser(options) {\n  var _this = this;\n  _classCallCheck(this, OperatingSystemParser);\n  this.options = {\n    versionTruncation: 1\n  };\n  this.parse = function (userAgent) {\n    var result = {\n      name: \"\",\n      version: \"\",\n      platform: _this.parsePlatform(userAgent)\n    };\n    var _iterator = _createForOfIteratorHelper(oss_json_1.default),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var operatingSystem = _step.value;\n        var match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n        if (!match) continue;\n        result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n        result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), _this.options.versionTruncation);\n        if (result.name === \"lubuntu\") {\n          result.name = \"Lubuntu\";\n        }\n        if (result.name === \"debian\") {\n          result.name = \"Debian\";\n        }\n        if (result.name === \"YunOS\") {\n          result.name = \"YunOs\";\n        }\n        return result;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return null;\n  };\n  this.parsePlatform = function (userAgent) {\n    if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n      return \"ARM\";\n    }\n    if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n      return \"MIPS\";\n    }\n    if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n      return \"SuperH\";\n    }\n    if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_?64\", userAgent)) {\n      return \"x64\";\n    }\n    if (user_agent_1.userAgentParser(\"(?:i[0-9]|x)86|i86pc\", userAgent)) {\n      return \"x86\";\n    }\n    return \"\";\n  };\n  this.options = Object.assign(Object.assign({}, this.options), options);\n});\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = function () {\n  return desktopOsArray;\n};\nOperatingSystemParser.getOsFamily = function (osName) {\n  var osShortName = OperatingSystemParser.getOsShortName(osName);\n  for (var _i = 0, _Object$entries = Object.entries(osFamilies); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      osFamily = _Object$entries$_i[0],\n      shortNames = _Object$entries$_i[1];\n    if (shortNames.includes(osShortName)) {\n      return osFamily;\n    }\n  }\n  return \"\";\n};\nOperatingSystemParser.getOsShortName = function (osName) {\n  for (var _i2 = 0, _Object$entries2 = Object.entries(shortOsNames); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n      shortName = _Object$entries2$_i[0],\n      name = _Object$entries2$_i[1];\n    if (name === osName) return shortName;\n  }\n  return \"\";\n};","map":{"version":3,"names":["_slicedToArray","require","default","_createForOfIteratorHelper","_createClass","_classCallCheck","__importDefault","mod","__esModule","Object","defineProperty","exports","value","oss_json_1","version_1","variable_replacement_1","user_agent_1","operating_system_json_1","desktopOsArray","shortOsNames","operatingSystem","osFamilies","OperatingSystemParser","options","_this","versionTruncation","parse","userAgent","result","name","version","platform","parsePlatform","_iterator","_step","s","n","done","match","userAgentParser","regex","variableReplacement","formatVersion","err","e","f","assign","getDesktopOsArray","getOsFamily","osName","osShortName","getOsShortName","_i","_Object$entries","entries","length","_Object$entries$_i","osFamily","shortNames","includes","_i2","_Object$entries2","_Object$entries2$_i","shortName"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/parsers/operating-system/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = operating_system_json_1.default.operatingSystem;\nconst osFamilies = operating_system_json_1.default.osFamilies;\nclass OperatingSystemParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                name: \"\",\n                version: \"\",\n                platform: this.parsePlatform(userAgent)\n            };\n            for (const operatingSystem of oss_json_1.default) {\n                const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n                if (!match)\n                    continue;\n                result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n                result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n                if (result.name === \"lubuntu\") {\n                    result.name = \"Lubuntu\";\n                }\n                if (result.name === \"debian\") {\n                    result.name = \"Debian\";\n                }\n                if (result.name === \"YunOS\") {\n                    result.name = \"YunOs\";\n                }\n                return result;\n            }\n            return null;\n        };\n        this.parsePlatform = (userAgent) => {\n            if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n                return \"ARM\";\n            }\n            if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n                return \"MIPS\";\n            }\n            if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n                return \"SuperH\";\n            }\n            if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_?64\", userAgent)) {\n                return \"x64\";\n            }\n            if (user_agent_1.userAgentParser(\"(?:i[0-9]|x)86|i86pc\", userAgent)) {\n                return \"x86\";\n            }\n            return \"\";\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\nOperatingSystemParser.getOsFamily = (osName) => {\n    const osShortName = OperatingSystemParser.getOsShortName(osName);\n    for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n        if (shortNames.includes(osShortName)) {\n            return osFamily;\n        }\n    }\n    return \"\";\n};\nOperatingSystemParser.getOsShortName = (osName) => {\n    for (const [shortName, name] of Object.entries(shortOsNames)) {\n        if (name === osName)\n            return shortName;\n    }\n    return \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}