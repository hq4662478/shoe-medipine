{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nconst client_1 = __importDefault(require(\"./parsers/client\"));\nconst device_1 = __importDefault(require(\"./parsers/device\"));\nconst operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\nconst vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\nconst browser_1 = __importDefault(require(\"./parsers/client/browser\"));\nconst BotParser = require(\"./parsers/bot\");\nconst user_agent_1 = require(\"./utils/user-agent\");\nconst version_compare_1 = require(\"./utils/version-compare\");\nclass DeviceDetector {\n  constructor(options) {\n    // Default options\n    this.options = {\n      skipBotDetection: false,\n      versionTruncation: 1\n    };\n    this.parse = userAgent => {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n      const result = {\n        client: this.clientParser.parse(userAgent),\n        os: this.operatingSystemParser.parse(userAgent),\n        device: this.deviceParser.parse(userAgent),\n        bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)\n      };\n      const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n      const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n      const osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n      if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n        const brand = this.vendorFragmentParser.parse(userAgent);\n        if (brand) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n          result.device.brand = brand;\n        }\n      }\n      /**\n       * Assume all devices running iOS / Mac OS are from Apple\n       */\n      if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"watchOS\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.brand = \"Apple\";\n      }\n      /**\n       * Chrome on Android passes the device type based on the keyword 'Mobile'\n       * If it is present the device should be a smartphone, otherwise it's a tablet\n       * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n       * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have\n       *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.\n       */\n      if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && user_agent_1.userAgentParser(\"Chrome/[\\\\.0-9]*\", userAgent)) {\n        if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?:Mobile|eliboM)\", userAgent)) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n          result.device.type = \"smartphone\";\n        } else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n          result.device.type = \"tablet\";\n        }\n      }\n      /**\n       * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n       */\n      if (!((_f = result.device) === null || _f === void 0 ? void 0 : _f.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"tablet\";\n      }\n      /**\n       * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n       */\n      if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidMobileFragment(userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"smartphone\";\n      }\n      /**\n       * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n       * too late, there were a bunch of tablets running with 2.x\n       * With 4.0 the two trees were merged and it is for smartphones and tablets\n       *\n       * So were are expecting that all devices running Android < 2 are smartphones\n       * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n       */\n      if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && osName === \"Android\" && osVersion !== \"\") {\n        if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n          result.device.type = \"smartphone\";\n        } else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n          result.device.type = \"tablet\";\n        }\n      }\n      /**\n       * All detected feature phones running android are more likely smartphones\n       */\n      if (((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) === \"feature phone\" && osFamily === \"Android\") {\n        result.device.type = \"smartphone\";\n      }\n      /**\n       * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n       * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n       * UA string, the computer has touch capability, and is running Windows 8 (or later).\n       * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n       *\n       * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n       * all Windows 8 touch devices are tablets.\n       */\n      if (!((_k = result.device) === null || _k === void 0 ? void 0 : _k.type) && this.isToucheEnabled(userAgent) && (osName === \"Windows RT\" || osName === \"Windows\" && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"tablet\";\n      }\n      /**\n       * All devices running Opera TV Store are assumed to be televisions\n       */\n      if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"television\";\n      }\n      /**\n       * All devices running Tizen TV or SmartTV are assumed to be televisions\n       */\n      if (user_agent_1.userAgentParser(\"SmartTV|Tizen.+ TV .+$\", userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"television\";\n      }\n      /**\n       * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n       */\n      if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_m = result.client) === null || _m === void 0 ? void 0 : _m.name) || \"\")) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"television\";\n      }\n      /**\n       * Set device type to desktop if string ua contains desktop\n       */\n      const hasDesktop = \"desktop\" !== ((_o = result.device) === null || _o === void 0 ? void 0 : _o.type) && null !== user_agent_1.userAgentParser(\"Desktop\", userAgent) && this.hasDesktopFragment(userAgent);\n      if (hasDesktop) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"desktop\";\n      }\n      // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n      if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n        result.device.type = \"desktop\";\n      }\n      return result;\n    };\n    this.hasAndroidMobileFragment = userAgent => {\n      return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n    };\n    this.hasAndroidTabletFragment = userAgent => {\n      return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n    };\n    this.hasDesktopFragment = userAgent => {\n      return user_agent_1.userAgentParser(\"Desktop (x(?:32|64)|WOW64);\", userAgent);\n    };\n    this.isDesktop = (result, osFamily) => {\n      if (!result.os) {\n        return false;\n      }\n      // Check for browsers available for mobile devices only\n      if (this.usesMobileBrowser(result.client)) {\n        return false;\n      }\n      return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n    };\n    this.usesMobileBrowser = client => {\n      var _a, _b;\n      if (!client) return false;\n      return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n    };\n    this.isToucheEnabled = userAgent => {\n      return user_agent_1.userAgentParser(\"Touch\", userAgent);\n    };\n    this.createDeviceObject = () => ({\n      type: \"\",\n      brand: \"\",\n      model: \"\"\n    });\n    this.options = Object.assign(Object.assign({}, this.options), options);\n    this.clientParser = new client_1.default(this.options);\n    this.deviceParser = new device_1.default();\n    this.operatingSystemParser = new operating_system_1.default(this.options);\n    this.vendorFragmentParser = new vendor_fragment_1.default();\n    this.botParser = new BotParser();\n  }\n}\nmodule.exports = DeviceDetector;","map":{"version":3,"names":["__importDefault","mod","__esModule","client_1","require","device_1","operating_system_1","vendor_fragment_1","browser_1","BotParser","user_agent_1","version_compare_1","DeviceDetector","constructor","options","skipBotDetection","versionTruncation","parse","userAgent","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","result","client","clientParser","os","operatingSystemParser","device","deviceParser","bot","botParser","osName","name","osVersion","version","osFamily","default","getOsFamily","brand","vendorFragmentParser","createDeviceObject","includes","type","userAgentParser","hasAndroidTabletFragment","hasAndroidMobileFragment","versionCompare","isToucheEnabled","hasDesktop","hasDesktopFragment","isDesktop","usesMobileBrowser","getDesktopOsArray","isMobileOnlyBrowser","model","Object","assign","module","exports"],"sources":["/Users/quanhuynh/workspace/myProject/VTT/test_code/python_src/npm_web/shoe-medipine/node_modules/device-detector-js/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst client_1 = __importDefault(require(\"./parsers/client\"));\nconst device_1 = __importDefault(require(\"./parsers/device\"));\nconst operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\nconst vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\nconst browser_1 = __importDefault(require(\"./parsers/client/browser\"));\nconst BotParser = require(\"./parsers/bot\");\nconst user_agent_1 = require(\"./utils/user-agent\");\nconst version_compare_1 = require(\"./utils/version-compare\");\nclass DeviceDetector {\n    constructor(options) {\n        // Default options\n        this.options = {\n            skipBotDetection: false,\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n            const result = {\n                client: this.clientParser.parse(userAgent),\n                os: this.operatingSystemParser.parse(userAgent),\n                device: this.deviceParser.parse(userAgent),\n                bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)\n            };\n            const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n            const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n            const osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n            if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n                const brand = this.vendorFragmentParser.parse(userAgent);\n                if (brand) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.brand = brand;\n                }\n            }\n            /**\n             * Assume all devices running iOS / Mac OS are from Apple\n             */\n            if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"watchOS\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.brand = \"Apple\";\n            }\n            /**\n             * Chrome on Android passes the device type based on the keyword 'Mobile'\n             * If it is present the device should be a smartphone, otherwise it's a tablet\n             * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n             * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have\n             *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.\n             */\n            if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && user_agent_1.userAgentParser(\"Chrome/[\\\\.0-9]*\", userAgent)) {\n                if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?:Mobile|eliboM)\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n             */\n            if (!((_f = result.device) === null || _f === void 0 ? void 0 : _f.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n             */\n            if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidMobileFragment(userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n             * too late, there were a bunch of tablets running with 2.x\n             * With 4.0 the two trees were merged and it is for smartphones and tablets\n             *\n             * So were are expecting that all devices running Android < 2 are smartphones\n             * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n             */\n            if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && osName === \"Android\" && osVersion !== \"\") {\n                if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * All detected feature phones running android are more likely smartphones\n             */\n            if (((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) === \"feature phone\" && osFamily === \"Android\") {\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n             * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n             * UA string, the computer has touch capability, and is running Windows 8 (or later).\n             * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n             *\n             * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n             * all Windows 8 touch devices are tablets.\n             */\n            if (!((_k = result.device) === null || _k === void 0 ? void 0 : _k.type)\n                && this.isToucheEnabled(userAgent)\n                && (osName === \"Windows RT\"\n                    || (osName === \"Windows\"\n                        && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0))) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * All devices running Opera TV Store are assumed to be televisions\n             */\n            if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * All devices running Tizen TV or SmartTV are assumed to be televisions\n             */\n            if (user_agent_1.userAgentParser(\"SmartTV|Tizen.+ TV .+$\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n             */\n            if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_m = result.client) === null || _m === void 0 ? void 0 : _m.name) || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * Set device type to desktop if string ua contains desktop\n             */\n            const hasDesktop = \"desktop\" !== ((_o = result.device) === null || _o === void 0 ? void 0 : _o.type)\n                && null !== user_agent_1.userAgentParser(\"Desktop\", userAgent)\n                && this.hasDesktopFragment(userAgent);\n            if (hasDesktop) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"desktop\";\n            }\n            // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n            if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"desktop\";\n            }\n            return result;\n        };\n        this.hasAndroidMobileFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n        };\n        this.hasAndroidTabletFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n        };\n        this.hasDesktopFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Desktop (x(?:32|64)|WOW64);\", userAgent);\n        };\n        this.isDesktop = (result, osFamily) => {\n            if (!result.os) {\n                return false;\n            }\n            // Check for browsers available for mobile devices only\n            if (this.usesMobileBrowser(result.client)) {\n                return false;\n            }\n            return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n        };\n        this.usesMobileBrowser = (client) => {\n            var _a, _b;\n            if (!client)\n                return false;\n            return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n        };\n        this.isToucheEnabled = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Touch\", userAgent);\n        };\n        this.createDeviceObject = () => ({\n            type: \"\",\n            brand: \"\",\n            model: \"\"\n        });\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.clientParser = new client_1.default(this.options);\n        this.deviceParser = new device_1.default();\n        this.operatingSystemParser = new operating_system_1.default(this.options);\n        this.vendorFragmentParser = new vendor_fragment_1.default();\n        this.botParser = new BotParser();\n    }\n}\nmodule.exports = DeviceDetector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}